# Sets {.unnumbered}

The list of sets in aphabetical order of setsID


```{r, echo=FALSE}
# Utility Functions
handle_empty_character_vector <-
  function(check_vector, replace_string) {
    if (length(check_vector) < 1) {
      return(replace_string)
    }else{
      return(check_vector)
    }
  }

list_creation <- function(string_to_append, list_values){
  string_to_append <- glue::glue('{string_to_append} 
                                 <ul>')
  for (list_element in list_values) {
    string_to_append <- glue::glue('{string_to_append} 
                                   <li> {list_element} </li>')
  }
  string_to_append <- glue::glue('{string_to_append} 
                                 </ul>')
  return(string_to_append)
}




# @RUSTY replace to use excel directly
main_db <- DBI::dbConnect(RSQLite::SQLite(), "../data/tables/main.sqlite")
quary <- paste("SELECT", "*", "FROM", "sets", "ORDER BY setType")
sets_table <- DBI::dbGetQuery(main_db, quary)
quary <- paste("SELECT", "*", "FROM", "parts")
parts_table <- DBI::dbGetQuery(main_db, quary)

# Clean input from NA from Excel imports
sets_table <- sets_table[!is.na(sets_table$partID),]
parts_table <- parts_table[!is.na(parts_table$partID),]

output_string <- ""


# Find and loop over unique setTypes
unique_set_types <- unique(sets_table$setType)
for(set_type in unique_set_types){
  # Create header for setType
  set_type_info <- parts_table[parts_table$partID == set_type,]
  
  set_type_label <- set_type_info$partLabel
  set_type_label <- handle_empty_character_vector(set_type_label, "Part Label is missing at the moment")
  
  set_type_instruction <- set_type_info$partInstr
  set_type_instruction <- handle_empty_character_vector(set_type_instruction, "Part Instruction is missing at the moment")
  
  output_string <- glue::glue('{output_string}
                              # {set_type_label}({set_type})
                                {set_type_instruction}
                              ')
  
  # Find and loop over unique setID according to set_type
  rows_for_current_set_type <- sets_table[sets_table$setType == set_type,]
  unique_set_IDs <- unique(rows_for_current_set_type$setID)
  for (set_ID in unique_set_IDs) {
    # Create set_ID subsection
    output_string <- glue::glue('{output_string}
    
                                ### {set_ID} set members:')
    list_values <- list()
    
    # Find and loop over unique partID according to set_ID
    current_set_ID_rows <- rows_for_current_set_type[rows_for_current_set_type$setID == set_ID,]
    unique_part_IDs <- unique(current_set_ID_rows$partID)
    for (part_ID in unique_part_IDs) {
      part_info <- parts_table[parts_table$partID == part_ID,]
      part_label <- part_info$partLabel
      part_label <- handle_empty_character_vector(part_label, "Part Label is missing at the moment")
      
      list_values[[length(list_values)+1]] <- glue::glue('{part_label}({part_ID})')
      
    }
    output_string <- list_creation(output_string, list_values)
  }
}


```

`r output_string`
