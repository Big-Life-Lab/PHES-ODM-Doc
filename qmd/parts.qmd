# Parts {.unnumbered}

{{< include _versions.qmd >}}

Parts are the smallest way of describing anything in the ODM. An analogy to parts of a car can be used to illustrate this point. If you own a car, your garage can access a parts list that contains every part of your car, right down to every nut and bolt. Similarly, the ODM has a `part ID` ([partID](https://docs.phes-odm.org/parts.html#partID)) and `part description` ([partDescription](https://docs.phes-odm.org/parts.html#partDesc)) for every measure, method, and attribute. There are also `part IDs` for `units`, `aggregations`, and other `parts`. The part list is presented below.

::: {.callout-tip collapse="true"}
## Did you know you can identify part IDs by their specific naming format?

Each part ID starts with a lowercase character and contains no special characters. Parts have less than 12 characters, while part types such as units and aggregations have a maximum of seven characters.

The unique construction of part IDs serves several purposes in addition to generating valid URLs. Users can create wide table variable names (headers) using part IDs that are valid in all open software languages. ODM supports a standard method of generating wide variable names by concatenating partIDs with an underscore, `_`. For this reason, some part types have a limit of seven characters to ensure the total length of wide names remains less than 35 characters, which is the character limit length of some statistical language software. The wide variable naming method will be added to the documentation.
:::
```{r setup, echo=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("../"))
```
```{r, echo=FALSE, warning=FALSE}
# Source utility functions
source("R/qmd-utils.R")
# Source table formatting
source("R/format-table.R")
# Source warning utils
source("R/warning-utils.R")
source("R/odm-dictionary-file.R")
source("R/parts-sheet.R")
source("R/generate-display.R")

# String to store parts display template
parts_display_template <- '### {partLabel} {{ #{partID} }} 
      ({partID}). {partDesc} {if (partInstr %!=na% odm_dictionary$dictionary_missing_value_replacement) partInstr else "" } </br>
      *Part Type:* <a href="#{partType}">{partType}</a> </br>
      *Domain:* <a href="#{domain}">{domain}</a> </br>
      *Speciment ID:* <a href="/{part_speciment_set_location}.html#{specimenSet}">{specimenSet}</a> </br>
      *Compartment Set:* <a href="/{part_comp_set_location}.html#{compartmentSet}">{compartmentSet}</a> </br>
      *Group:* <a href="#{group}">{group}</a> </br>
      *Class:* <a href="#{class}">{class}</a> </br>
      *Nomenclature:* <a href="#{nomenclature}">{nomenclature}</a> </br>
      *Ontology Reference:* <a href="#{ontologyRef}">{ontologyRef}</a> </br>
      *Category Set ID:* <a href="/{part_cat_set_ID_location}.html#{mmaSet}">{mmaSet}</a> </br>
      *Unit Set:* <a href="/{part_unit_set_ID_location}.html#{unitSet}">{unitSet}</a> </br>
      *Aggregation Scale:* <a href="#{aggregationScale}">{aggregationScale}</a> </br>
      *Quality Set:* <a href="/{part_quality_set_ID_location}.html#{qualitySet}">{qualitySet}</a> </br>
      *Reference Link:* {refLink} </br>
      *Data Type:* <a href="#{dataType}">{dataType}</a> </br>
      *Missingness Set:* <a href="/{part_missingness_set_location}.html#{missingnessSet}">{missingnessSet} </a> </br>
      *Minimum Value:* {minValue} </br>
      *Maximum Value:* {maxValue} </br>
      *Minimum Length:* {minLength} </br>
      *Maximum Length:* {maxLength} </br>
      *Part Status:* {if (status %!=na% parts$status$categories$active) glue::glue(\'**{status}**\') else status }. \\
      First released: {firstReleased}. \\
      Last updated: {lastUpdated}. </br>
      '

# String to store parts display content
parts_info_display_content <- ""


# Prepare parts data.frame
parts_table <- format_table(parts_table_source, parts_sheet_column_names, remove_duplicate = TRUE)


# Removal of parts under development
parts_table <-
  parts_table[parts_table[[parts_sheet_column_names$status]] != parts$status$categories$development, ]

# Sort parts alphabetically by partID
parts_table <- parts_table[order(parts_table[[parts_sheet_column_names$part_id]]), ]

# Loop over every part
for (part_row_index in seq_len(nrow(parts_table))) {
  part_row <- parts_table[part_row_index,]
  
  # Declare variables used
  display_input <- list()
  display_input[["partID"]] <- part_row[[parts_sheet_column_names$part_id]]
  display_input[["partLabel"]] <- part_row[[parts_sheet_column_names$part_label]]
  display_input[["partDesc"]] <- part_row[[parts_sheet_column_names$part_description]]
  display_input[["partInstr"]] <- part_row[[parts_sheet_column_names$part_instruction]]
  display_input[["partType"]] <- part_row[[parts_sheet_column_names$part_type]]
  display_input[["domain"]] <- part_row[[parts_sheet_column_names$domain]]
  display_input[["specimenSet"]] <- part_row[[parts_sheet_column_names$specimen_set]]
  display_input[["compartmentSet"]] <- part_row[[parts_sheet_column_names$compartment_set]]
  display_input[["group"]] <- part_row[[parts_sheet_column_names$group]]
  display_input[["class"]] <- part_row[[parts_sheet_column_names$class]]
  display_input[["nomenclature"]] <- part_row[[parts_sheet_column_names$nomenclature]]
  display_input[["ontologyRef"]] <- part_row[[parts_sheet_column_names$ontology_reference]]
  display_input[["mmaSet"]] <- part_row[[parts_sheet_column_names$mma_set]]
  display_input[["unitSet"]] <- part_row[[parts_sheet_column_names$unit_set]]
  display_input[["aggregationScale"]] <- part_row[[parts_sheet_column_names$aggregation_scale]]
  display_input[["qualitySet"]] <- part_row[[parts_sheet_column_names$quality_set]]
  display_input[["refLink"]] <- part_row[[parts_sheet_column_names$reference_link]]
  display_input[["dataType"]] <- part_row[[parts_sheet_column_names$data_type]]
  display_input[["missingnessSet"]] <- part_row[[parts_sheet_column_names$missingness_set]]
  display_input[["minValue"]] <- part_row[[parts_sheet_column_names$min_value]]
  display_input[["maxValue"]] <- part_row[[parts_sheet_column_names$max_value]]
  display_input[["minLength"]] <- part_row[[parts_sheet_column_names$min_length]]
  display_input[["maxLength"]] <- part_row[[parts_sheet_column_names$max_length]]
  display_input[["status"]] <- part_row[[parts_sheet_column_names$status]]
  display_input[["firstReleased"]] <- part_row[[parts_sheet_column_names$first_released]]
  display_input[["lastUpdated"]] <- part_row[[parts_sheet_column_names$last_updated]]
  
  # Escape any backticks in desc and inst
  display_input[["partDesc"]] <- gsub("`", "\\\\`", display_input[["partDesc"]])
  display_input[["partInstr"]] <- gsub("`", "\\\\`", display_input[["partInstr"]])
  
  # Generate appropriate link locations for attributes that could contain sets
  display_input[["part_comp_set_location"]] <- determine_link_source(display_input[["compartmentSet"]])
  display_input[["part_quality_set_ID_location"]] <- determine_link_source(display_input[["qualitySet"]])
  display_input[["part_cat_set_ID_location"]] <- determine_link_source(display_input[["mmaSet"]])
  display_input[["part_unit_set_ID_location"]] <- determine_link_source(display_input[["unitSet"]])
  display_input[["part_speciment_set_location"]] <- determine_link_source(display_input[["specimenSet"]])
  display_input[["part_missingness_set_location"]] <-
    determine_link_source(display_input[["missingnessSet"]])
  
  # Assemble the display string
  single_part_display <- generate_display(parts_display_template, display_input, display_input[["partID"]])
  parts_info_display_content <-
    glue::glue(
      '{parts_info_display_content}
      
      {single_part_display}
      ')
}
```

`r parts_info_display_content`